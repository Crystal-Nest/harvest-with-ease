plugins {
  id "net.minecraftforge.gradle" version "[6.0.16,6.2)"
  id "com.modrinth.minotaur" version "2.+"
  id "com.matthewprenger.cursegradle" version "1.4.+"
  id "com.github.breadmoirai.github-release" version "2.4.+"
}

version = "${minecraft_version}-${mod_version}-${loader.toLowerCase()}"
group = project.group
base { archivesName = mod_id }

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

minecraft {
  mappings channel: "official", version: minecraft_version
  copyIdeResources = true

  // This property enables access transformers for use in development.
  // They will be applied to the Minecraft artifact.
  // See https://docs.minecraftforge.net/en/latest/advanced/accesstransformers/ for more information.
  // accessTransformer = file("src/main/resources/META-INF/accesstransformer.cfg")

  runs {
    configureEach {
      workingDirectory project.file("run")
      property "forge.logging.markers", "REGISTRIES"
      // Recommended logging level for the console
      // You can set various levels here.
      // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
      property "forge.logging.console.level", "debug"
    }
    client {
      property "forge.enabledGameTestNamespaces", mod_id
    }
    server {
      property "forge.enabledGameTestNamespaces", mod_id
      args "--nogui"
    }
    // This run config launches GameTestServer and runs all registered gametests, then exits.
    // By default, the server will crash when no gametests are provided.
    // The gametest system is also enabled by default for other run configs under the /test command.
    gameTestServer {
      property "forge.enabledGameTestNamespaces", mod_id
    }
    data {
      // example of overriding the workingDirectory set in configureEach above
      workingDirectory project.file("run-data")
      // Specify the mod_id for data generation, where to output the resulting resource, and where to look for existing resources.
      args "--mod", mod_id, "--all", "--output", file("src/generated/resources/"), "--existing", file("src/main/resources/")
    }
  }
}

sourceSets.main.resources { srcDir "src/generated/resources" }

repositories {}

dependencies {
  minecraft "net.minecraftforge:forge:${minecraft_version}-${loader_version}${forge_subversion}"
}

def resourceTargets = ["META-INF/mods.toml", "pack.mcmeta"]
def intoTargets = ["$rootDir/bin/main/"]
def replaceProperties = [
  mod_id: mod_id,
  mod_id_kebab: mod_id_kebab,
  mod_title: mod_title,
  minecraft_version: minecraft_version,
  mod_version: mod_version,
  loader_version: loader_version,
  forge_subversion: forge_subversion,
  authors: authors,
  github_user: github_user
]

processResources {
  inputs.properties replaceProperties
  replaceProperties.put "project", project

  filesMatching(resourceTargets) {
    expand replaceProperties
  }

  intoTargets.each { target ->
    if (file(target).exists()) {
      copy {
        from(sourceSets.main.resources) {
          include resourceTargets
          expand replaceProperties
        }
        into target
      }
    }
  }
}

tasks.withType(JavaCompile).configureEach {
  it.options.encoding = "UTF-8"
  it.options.release = 17
}

tasks.named('jar', Jar).configure {
  manifest {
    attributes([
      "Specification-Title"     : project.mod_title,
      "Specification-Version"   : project.mod_version,
      "Specification-Vendor"    : project.authors,
      "Implementation-Title"    : project.mod_title,
      "Implementation-Version"  : project.mod_version,
      "Implementation-Vendor"   : project.authors,
      "Implementation-Vendor-Id": project.group,
      "Implementation-URL"      : "https://github.com/${github_user}/${mod_id_kebab}/tree/${minecraft_version}",
      "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
    ])
  }

  finalizedBy 'reobfJar'
}

sourceSets.each {
  def dir = layout.buildDirectory.dir("sourcesSets/$it.name")
  it.output.resourcesDir = dir
  it.java.destinationDirectory = dir
}

def changelog_body = "See [Changelog](https://github.com/${github_user}/${mod_id_kebab}/blob/master/CHANGELOG.md#${minecraft_version.replaceAll('\\.', '')}-${mod_version.replaceAll('\\.', '')}---${new Date().format("yyyyMMdd")})."

file("../api-keys.properties").withReader {
  Properties props = new Properties()
  props.load(it)
  project.api_keys = props
}

curseforge {
  apiKey = api_keys.curseforge
  project {
    id = curseforge_id
    changelogType = "markdown"
    changelog = changelog_body
    releaseType = "release"
    addGameVersion loader
    addGameVersion minecraft_version
    mainArtifact(jar) {
      displayName = "[${loader} - ${minecraft_version}] ${mod_title} v${mod_version}"
      // relations {}
    }
  }
  options {
    detectNewerJava = true
    forgeGradleIntegration = false
  }
}

modrinth {
  token = api_keys.modrinth
  projectId = mod_id_kebab
  versionNumber = mod_version
  versionName = "[${loader} - ${minecraft_version}] ${mod_title} v${mod_version}"
  changelog = changelog_body
  uploadFile = jar
  versionType = "release"
  gameVersions = [minecraft_version]
  loaders = [loader.toLowerCase()]
  dependencies {}
}

githubRelease {
  token api_keys.github
  owner github_user
  repo mod_id_kebab
  tagName "v${minecraft_version}-${mod_version}"
  targetCommitish minecraft_version
  releaseName "v${minecraft_version}-${mod_version}"
  generateReleaseNotes false
  body changelog_body
  draft true
  prerelease false
  releaseAssets jar
  // Setting this to true will allow this plugin to upload artifacts to a release if it found an existing one. If overwrite is set to true, this option is ignored.
  allowUploadToExisting true
  // By default false; if set to true, will delete an existing release with the same tag and name
  // overwrite true
  // by default false; you can use this to see what actions would be taken without making a release
  // dryRun false
}
