package crystalspider.harvestwithease.handlers;

import java.util.Collections;
import java.util.NoSuchElementException;

import javax.annotation.Nullable;

import crystalspider.harvestwithease.HarvestWithEaseLoader;
import crystalspider.harvestwithease.api.HarvestWithEaseAPI;
import crystalspider.harvestwithease.api.events.HarvestWithEaseEvent;
import crystalspider.harvestwithease.api.events.HarvestWithEaseEvent.AfterHarvest;
import crystalspider.harvestwithease.api.events.HarvestWithEaseEvent.BeforeHarvest;
import crystalspider.harvestwithease.api.events.HarvestWithEaseEvent.HarvestDrops;
import crystalspider.harvestwithease.api.events.HarvestWithEaseEvent.RightClickHarvestCheck;
import crystalspider.harvestwithease.config.HarvestWithEaseConfig;
import net.minecraft.core.BlockPos;
import net.minecraft.core.Direction;
import net.minecraft.server.level.ServerLevel;
import net.minecraft.server.level.ServerPlayer;
import net.minecraft.sounds.SoundSource;
import net.minecraft.world.InteractionHand;
import net.minecraft.world.InteractionResult;
import net.minecraft.world.entity.player.Player;
import net.minecraft.world.item.ItemStack;
import net.minecraft.world.level.Level;
import net.minecraft.world.level.block.Block;
import net.minecraft.world.level.block.SoundType;
import net.minecraft.world.level.block.state.BlockState;
import net.minecraft.world.level.block.state.properties.IntegerProperty;
import net.minecraft.world.phys.BlockHitResult;
import net.minecraftforge.common.MinecraftForge;
import net.minecraftforge.common.ToolActions;
import net.minecraftforge.event.entity.player.PlayerInteractEvent.RightClickBlock;
import net.minecraftforge.eventbus.api.Event.Result;
import net.minecraftforge.eventbus.api.EventPriority;
import net.minecraftforge.eventbus.api.SubscribeEvent;
import net.minecraftforge.fml.common.Mod.EventBusSubscriber;
import net.minecraftforge.fml.common.Mod.EventBusSubscriber.Bus;

/**
 * {@link RightClickBlock} event handler.
 * Handles the {@link RightClickBlock} event with {@link EventPriority#HIGH high priority} to right-click harvest when possible.
 * See {@link #handle(RightClickBlock)} for more details.
 */
@EventBusSubscriber(bus = Bus.FORGE)
public class RightClickBlockHandler {
  /**
   * Listens and handles the event {@link RightClickBlock} with {@link EventPriority#HIGH high priority}.
   * Will cancel further event processing only if the {@link Player player}
   * is not in spectator mode,
   * is not crouching,
   * is holding the correct item (depends on {@link HarvestWithEaseConfig#getRequireHoe() requireHoe})
   * and the interaction involves a fully grown {@link #isCrop crop}.
   * Will also dispatch some events related to right-click harvesting.
   * 
   * @param event
   */
  @SubscribeEvent(priority = EventPriority.HIGH)
  public static void handle(RightClickBlock event) {
    Level level = event.getLevel();
    Player player = event.getEntity();
    if (canInteract(player, event)) {
      BlockPos blockPos = event.getPos();
      BlockState blockState = level.getBlockState(blockPos);
      InteractionHand hand = getInteractionHand(player);
      if (hand == event.getHand() && canHarvest(level, blockState, blockPos, player, hand)) {
        try {
          IntegerProperty age = HarvestWithEaseAPI.getAge(blockState);
          if (blockState.getOptionalValue(age).orElse(0) >= Collections.max(age.getPossibleValues())) {
            cancel(event);
            if (!level.isClientSide()) {
              harvest((ServerLevel) level, age, blockState, blockPos, event.getFace(), event.getHitVec(), (ServerPlayer) player, hand);
            }
          }
        } catch (NullPointerException | NoSuchElementException | ClassCastException e) {
          HarvestWithEaseLoader.LOGGER.debug("Exception generated by block at [" + blockPos.getX() + ", " + blockPos.getY() + ", " + blockPos.getZ() + "]");
          HarvestWithEaseLoader.LOGGER.debug("This is a non blocking error, but can result in incorrect behavior for mod " + HarvestWithEaseLoader.MODID);
          HarvestWithEaseLoader.LOGGER.debug("Most probably the cause of this issue was that a non-crop ID was added in the configuration and its age property could not be retrieved, see stack trace for more details", e);
        }
      }
    }
  }

  /**
   * Harvests the crop, handles all related actions (exp granting, hoe damaging, dropping resources, etc.) and dispatches all related events.
   * 
   * @param level - {@link ServerLevel level}.
   * @param age - {@link IntegerProperty age} of the crop.
   * @param blockState - {@link BlockState} of the crop.
   * @param blockPos - {@link BlockPos} of the crop.
   * @param face - clicked {@link Direction face} of the crop block.
   * @param hitResult - {@link BlockHitResult} of the {@link RightClickBlock} event.
   * @param player - {@link ServerPlayer player} harvesting the crop.
   * @param hand - {@link InteractionHand hand} used to harvest.
   */
  private static void harvest(ServerLevel level, IntegerProperty age, BlockState blockState, BlockPos blockPos, Direction face, BlockHitResult hitResult, ServerPlayer player, InteractionHand hand) {
    MinecraftForge.EVENT_BUS.post(new BeforeHarvest(level, blockState, blockPos, face, hitResult, player, hand));
    grantExp(player);
    damageHoe(player, hand);
    dropResources(level, blockState, blockPos, face, hitResult, player, hand);
    level.setBlockAndUpdate(blockPos, blockState.setValue(age, 0));
    playSound(level, player, blockState, blockPos);
    MinecraftForge.EVENT_BUS.post(new AfterHarvest(level, blockState, blockPos, face, hitResult, player, hand));
  }

  /**
   * Checks whether the {@link Player} can interact with the {@link RightClickBlock event}.
   * 
   * @param player
   * @param event
   * @return whether the {@link Player} can interact with the {@link RightClickBlock event}.
   */
  private static boolean canInteract(Player player, RightClickBlock event) {
    return !player.isSpectator() && event.getUseBlock() != Result.DENY && !(HarvestWithEaseConfig.getRequireHoe() || event.getUseItem() == Result.DENY) && event.getResult() != Result.DENY;
  }

  /**
   * Grants the given player the configured amount of experience, if any.
   * 
   * @param player - {@link ServerPlayer player} to grant the experience to.
   */
  private static void grantExp(ServerPlayer player) {
    if (HarvestWithEaseConfig.getGrantedExp() > 0) {
      player.giveExperiencePoints(HarvestWithEaseConfig.getGrantedExp());
    }
  }

  /**
   * If needed and possible, damages the hoe of the given {@link HarvestWithEaseConfig#getDamageOnHarvest() damage}.
   * 
   * @param player - {@link ServerPlayer player} holding the hoe.
   * @param hand - {@link InteractionHand hand} holding the hoe.
   */
  private static void damageHoe(ServerPlayer player, InteractionHand hand) {
    if (HarvestWithEaseConfig.getRequireHoe() && HarvestWithEaseConfig.getDamageOnHarvest() > 0 && !player.isCreative()) {
      player.getItemInHand(hand).hurtAndBreak(HarvestWithEaseConfig.getDamageOnHarvest(), player, playerEntity -> playerEntity.broadcastBreakEvent(hand));
    }
  }

  /**
   * Drop the resources resulting from harvesting a crop in the given {@link ServerLevel level} and {@link BlockState blockState}, making them pop from the given face and using the item held in the given player hand.
   * Takes care of dispatching the {@link HarvestDrops} to retrieve the drops resulting from the harvest.
   * 
   * @param level - {@link ServerLevel server level} the drops should come from.
   * @param blockState - {@link BlockState state} of the crop being harvested.
   * @param blockPos - crop {@link BlockPos position}.
   * @param face - {@link Direction face} clicked of the crop.
   * @param hitResult - {@link BlockHitResult} of the {@link RightClickBlock} event.
   * @param player - {@link ServerPlayer player} harvesting the crop.
   * @param hand - {@link InteractionHand hand} used to harvest the crop.
   */
  private static void dropResources(ServerLevel level, BlockState blockState, BlockPos blockPos, Direction face, BlockHitResult hitResult, ServerPlayer player, InteractionHand hand) {
    HarvestDrops event = new HarvestDrops(level, blockState, blockPos, face, hitResult, player, hand);
    MinecraftForge.EVENT_BUS.post(event);
    for (ItemStack stack : event.drops) {
      Block.popResourceFromFace(level, blockPos, face, stack);
    }
  }

  /**
   * If {@link HarvestWithEaseConfig#getPlaySound() playSound} is true, plays the block breaking sound.
   * 
   * @param level - {@link ServerLevel} to play the sound.
   * @param player - {@link ServerPlayer player} activating the sound.
   * @param blockState - {@link BlockState state} of the block emitting the sound.
   * @param blockPos - {@link BlockPos position} of the block emitting the sound.
   */
  private static void playSound(ServerLevel level, ServerPlayer player, BlockState blockState, BlockPos blockPos) {
    if (HarvestWithEaseConfig.getPlaySound()) {
      SoundType soundType = blockState.getBlock().getSoundType(blockState, level, blockPos, player);
      level.playSound(null, blockPos, soundType.getBreakSound(), SoundSource.BLOCKS, soundType.getVolume(), soundType.getPitch());
    }
  }

  /**
   * Cancel the event to avoid further processing.
   * 
   * @param event
   */
  private static void cancel(RightClickBlock event) {
    event.setCancellationResult(InteractionResult.SUCCESS);
    event.setCanceled(true);
  }

  /**
   * Returns the most suitable interaction hand from the player.
   * Returns null if there was no suitable interaction hand.
   * 
   * @param player
   * @return most suitable interaction hand.
   */
  @Nullable
  private static InteractionHand getInteractionHand(Player player) {
    if (!player.isCrouching()) {
      if (isHoe(player.getMainHandItem())) {
        return InteractionHand.MAIN_HAND;
      }
      if (isHoe(player.getOffhandItem())) {
        return InteractionHand.OFF_HAND;
      }
      if (!HarvestWithEaseConfig.getRequireHoe()) {
        return InteractionHand.MAIN_HAND;
      }
    }
    return null;
  }

  /**
   * Checks whether or not the given itemStack can perform all the {@link ToolActions#DEFAULT_HOE_ACTIONS default hoe actions}.
   * 
   * @param handItem
   * @return whether the given itemStack is a hoe tool.
   */
  private static boolean isHoe(ItemStack handItem) {
    return ToolActions.DEFAULT_HOE_ACTIONS.stream().allMatch(toolAction -> handItem.canPerformAction(toolAction));
  }

  /**
   * Checks whether the given {@link Player} can right-click harvest the crop.
   * Dispatches the {@link RightClickHarvestCheck} event if the right-clicked block is indeed a crop.
   * 
   * @param level - {@link Level} of the interaction.
   * @param blockState - {@link BlockState} of the crop to harvest.
   * @param blockPos - {@link BlockPos} of the crop.
   * @param player - {@link Player} trying to harvest.
   * @param hand - {@link InteractionHand hand} being used to harvest the crop.
   * @return whether the player can right-click harvest the crop.
   */
  private static boolean canHarvest(Level level, BlockState blockState, BlockPos blockPos, Player player, InteractionHand hand) {
    if (HarvestWithEaseAPI.isCrop(blockState.getBlock()) && player.hasCorrectToolForDrops(blockState)) {
      RightClickHarvestCheck event = new RightClickHarvestCheck(level, blockState, blockPos, player, hand, true);
      MinecraftForge.EVENT_BUS.post(event);
      return event.canHarvest();
    }
    return false;
  }
}
